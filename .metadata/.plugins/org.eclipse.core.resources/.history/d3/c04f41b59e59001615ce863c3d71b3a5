package MainCommands;

import java.util.List;
import java.util.Map;

import org.bukkit.Bukkit;
import org.bukkit.ChatColor;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.enchantments.Enchantment;
import org.bukkit.entity.Player;
import org.bukkit.inventory.ItemStack;
import org.bukkit.inventory.PlayerInventory;
import org.bukkit.inventory.meta.ItemMeta;

import fanciful.FancyMessage;

public class Item extends Command{

	public Item(String name) {
		super(name);
	}

	@Override
	public boolean execute(CommandSender sender, String label, String[] args) {
		Player player = (Player)sender;
		
		PlayerInventory playerInventory = player.getInventory();
		ItemStack mainHandItem = playerInventory.getItemInMainHand();
		ItemMeta mainItemMeta = mainHandItem.getItemMeta();
		String itemName;
		
		if(mainItemMeta.hasDisplayName()){
			itemName = mainItemMeta.getDisplayName();
		}else{
			itemName = mainHandItem.getType().name();
		}
		
		String keyWord = "#item";
		ChatColor itemColor = ChatColor.BLUE;
		ChatColor mainColor = ChatColor.WHITE;
		ChatColor infoColor = ChatColor.GRAY;
		
		FancyMessage message = new FancyMessage("<" + player.getName() + "> ").color(mainColor);
		
		Map<Enchantment, Integer> enchant = mainHandItem.getEnchantments();

		
		for(String arg: args){
			if(arg.equalsIgnoreCase(keyWord)){
				message.then("[").color(mainColor);
				message.then(itemName).color(itemColor);
				String totalToolTip = itemName + "\n";
				int timesArround = 0;
				
				for(Map.Entry<Enchantment, Integer> enchantSingle: enchant.entrySet()){
					if(timesArround != 0){ totalToolTip += "\n"; }
					totalToolTip += realName(enchantSingle.getKey().getName().toString()) + " " + romans(enchantSingle.getValue());
					 timesArround++;
				}
				
				if(mainItemMeta.hasLore()){
					List<String> lore = mainItemMeta.getLore();
					for(int i = 0; i < lore.size(); i++){
						totalToolTip += "\n";
						totalToolTip += lore.get(i);
					}
				}
				
				message.tooltip(totalToolTip);
				message.then("] ").color(mainColor);
			}else{
				message.then(arg + " ");
			}
			message.toJSONString();
		}
		
		message.send(Bukkit.getOnlinePlayers());
		
		return true;
	}
	
	private String romans(Integer value) {
		switch (value){
			default:
				return "I";
			case 2:
				return "II";
			case 3:
				return "III";
			case 4:
				return "IV";
			case 5:
				return "V";
		}
	}

	public static String realName(String currentName){
		switch (currentName){
			case "PROTECTION_ENVIRONMENTAL":
				return "Protection";
				
			case "PROTECTION_FIRE":
				return "Fire Protection";
				 
			case "PROTECTION_FALL":
				return "Feather Falling";
				 
			case "PROTECTION_EXPLOSIONS":
				return "Blast Protection";
				 
			case "PROTECTION_PROJECTILE":
				return "Projectile Protection";
				 
			case "OXYGEN":
				return "Respiration";
				 
			case "WATER_WORKER":
				return "Aqua Affinity";
				 
			case "THORNS":
				return "Thorns";
				 
			case "DEPTH_STRIDER":
				return "Depth Strider";
				 
			case "FROST_WALKER":
				return "Frost Walker";
				 
			case "DAMAGE_ALL":
				return "Sharpness";
				 
			case "DAMAGE_UNDEAD":
				return "Smite";
				 
			case "DAMAGE_ARTHROPODS":
				return "Bane of Arthropods";
				 
			case "KNOCKBACK":
				return "Knockback";
				 
			case "FIRE_ASPECT":
				return "Fire Aspect";
				 
			case "LOOT_BONUS_MOBS":
				return "Looting";
				 
			case "DIG_SPEED":
				return "Efficiency";
				 
			case "SILK_TOUCH":
				return "Silk Touch";
				 
			case "DURABILITY":
				return "Unbreaking";
				 
			case "LOOT_BONUS_BLOCKS":
				return "Fortune";
				 
			case "ARROW_DAMAGE":
				return "Power";
				 
			case "ARROW_KNOCKBACK":
				return "Punch";
				 
			case "ARROW_FIRE":
				return "Flame";
				 
			case "ARROW_INFINITE":
				return "Infinity";
				 
			case "LUCK":
				return "Luck of the Sea";
				 
			case "LURE":
				return "Lure";

			case "MENDING":
				return "Mending";
		}
		return currentName;
	}
}// End of class
